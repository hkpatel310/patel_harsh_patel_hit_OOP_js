{"mappings":"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","sources":["js/main.js"],"sourcesContent":["class MultiStepForm {\n    constructor(formId) {\n        this.form = document.querySelector(`#${formId}`);\n        this.pages = Array.from(this.form.querySelectorAll(\".form__page\")); // Convert NodeList to Array for wider method compatibility\n        this.nextButtons = this.form.querySelectorAll(\".btn-next\");\n        this.prevButtons = this.form.querySelectorAll(\".btn-prev\");\n        this.currentYear = new Date().getFullYear();\n        this.initialize();\n    }\n\n    initialize() {\n        this.initializeButtons();\n        this.populateYearOptions();\n        this.bindColorChange();\n    }\n\n    initializeButtons() {\n        for (const btn of this.nextButtons) {\n            btn.addEventListener(\"click\", (e) => {\n                e.preventDefault();\n                let currentPage = this.getCurrentPage();\n                this.goToPage(currentPage + 1);\n            });\n        }\n\n        for (const btn of this.prevButtons) {\n            btn.addEventListener(\"click\", (e) => {\n                e.preventDefault();\n                let currentPage = this.getCurrentPage();\n                this.goToPage(currentPage - 1);\n            });\n        }\n    }\n\n    getCurrentPage() {\n        return parseInt(this.form.dataset.currentPage, 10);\n    }\n\n    getMaxPage() {\n        return parseInt(this.form.dataset.maxPage, 10);\n    }\n\n    goToPage(targetPage) {\n        if (targetPage > this.getMaxPage() || targetPage < 1) {\n            console.error(\"Page not found.\");\n            return;\n        }\n\n        for (const page of this.pages) {\n            page.classList.remove(\"active\");\n            if (parseInt(page.dataset.page, 10) === targetPage) {\n                page.classList.add(\"active\");\n            }\n        }\n\n        this.form.dataset.currentPage = String(targetPage);\n        this.updateProgressBar();\n    }\n\n    updateProgressBar() {\n        const allSteps = this.form.querySelectorAll(\".page-step\");\n        let currentPage = this.getCurrentPage();\n\n        for (const step of allSteps) {\n            step.classList.remove(\"active\");\n            if (parseInt(step.dataset.page, 10) <= currentPage) {\n                step.classList.add(\"active\");\n            }\n        }\n    }\n\n    populateYearOptions() {\n        const minYearSelect = this.form.querySelector('#minYear');\n        const maxYearSelect = this.form.querySelector('#maxYear');\n\n        for (let year = 2000; year <= this.currentYear; year++) {\n            minYearSelect.appendChild(new Option(year, year));\n            maxYearSelect.appendChild(new Option(year, year));\n        }\n    }\n\n    bindColorChange() {\n        const colorSelect = this.form.querySelector('#color');\n        if (colorSelect) {\n            colorSelect.addEventListener('change', (e) => this.updateColorPreview(e.target.value));\n        }\n    }\n\n    updateColorPreview(color) {\n        const colorPreview = this.form.querySelector('#colorPreview');\n        if (colorPreview) {\n            colorPreview.style.backgroundColor = color;\n        }\n    }\n}\n\n// Instantiate the class at the end of the script to ensure the DOM is fully loaded\nnew MultiStepForm(\"multistep-form\");\n"],"names":[],"version":3,"file":"index.72be8890.js.map","sourceRoot":"/__parcel_source_root/"}